{
  "/src/active.ts": {
    "code": "import { RefinerDB, IndexType } from \"refinerdb\";\nimport items from \"./items\";\n\nlet indexDefinitions = [\n  { key: \"tags\", type: IndexType.String },\n  // Because all of the titles are generally unique, generating a list of\n  // refiner options and their counts is not that useful. We can improve\n  // performance by skipping that step.\n  { key: \"title\", type: IndexType.String, skipRefinerOptions: true },\n];\n\nexport const setupRefinerDB = () => {\n  let refinerDB = new RefinerDB(\"my-demo\");\n  refinerDB.setIndexes(indexDefinitions);\n  refinerDB.setItems(items);\n\n  return refinerDB;\n};\n",
    "active": true,
    "hidden": false
  },
  "index.html": {
    "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Parcel Sandbox</title>\n    <meta charset=\"UTF-8\" />\n  </head>\n\n  <body>\n    <div id=\"app\"></div>\n\n    <script src=\"src/index.ts\"></script>\n  </body>\n</html>\n",
    "active": false,
    "hidden": true
  },
  "/src/index.ts": {
    "code": "import { setupRefinerDB } from \"./setup\";\n\nconst rootElement = document.getElementById(\"app\");\nconst refinerDB = setupRefinerDB();\n\nlet init = async () => {\n  let { items, refiners } = await refinerDB.query({\n    filter: {\n      tags: \"fun\",\n    },\n  });\n\n  if (rootElement) {\n    rootElement.innerHTML = `\n    <h1>Query Result</h1>\n    <pre>${JSON.stringify({ items, refiners }, null, 2)}</pre>`;\n  }\n};\ninit();\n",
    "active": false,
    "hidden": false
  },
  "/src/items.ts": {
    "code": "export default [\n  { title: \"Watch the new Matrix\", id: 1, tags: [\"fun\"] },\n  { title: \"Cut the grass\", id: 2, tags: [\"chore\", \"lawn\"] },\n  { title: \"Buy fetilizer\", id: 4, tags: [\"lawn\", \"shopping\"] },\n  { title: \"Build RefinerDB\", id: 3, tags: [\"fun\", \"code\"] },\n  { title: \"Document RefinerDB\", id: 11, tags: [\"chore\", \"code\"] },\n];\n",
    "active": false,
    "hidden": false
  }
}