{
  "getting-started-1": {
    "files": {
      "index.html": {
        "hidden": true,
        "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Parcel Sandbox</title>\n    <meta charset=\"UTF-8\" />\n  </head>\n\n  <body>\n    <div id=\"app\"></div>\n\n    <script src=\"src/index.ts\"></script>\n  </body>\n</html>\n"
      },
      "/src/setup.ts": {
        "active": true,
        "code": "import { RefinerDB, IndexType } from \"refinerdb\";\nimport items from \"./items\";\n\nlet indexDefinitions = [\n  { key: \"tags\", type: IndexType.String },\n  // Because all of the titles are generally unique, generating a list of\n  // refiner options and their counts is not that useful. We can improve\n  // performance by skipping that step.\n  { key: \"title\", type: IndexType.String, skipRefinerOptions: true },\n];\n\nexport const setupRefinerDB = () => {\n  let refinerDB = new RefinerDB(\"my-demo\");\n  refinerDB.setIndexes(indexDefinitions);\n  refinerDB.setItems(items);\n\n  return refinerDB;\n};\n"
      },
      "/src/index.ts": {
        "code": "import { setupRefinerDB } from \"./setup\";\n\nconst rootElement = document.getElementById(\"app\");\nconst refinerDB = setupRefinerDB();\n\nlet init = async () => {\n  let { items, refiners } = await refinerDB.query({\n    filter: {\n      tags: \"fun\",\n    },\n  });\n\n  if (rootElement) {\n    rootElement.innerHTML = `\n    <h1>Query Result</h1>\n    <pre>${JSON.stringify({ items, refiners }, null, 2)}</pre>`;\n  }\n};\ninit();\n"
      },
      "/src/items.ts": {
        "code": "export default [\n  { title: \"Watch the new Matrix\", id: 1, tags: [\"fun\"] },\n  { title: \"Cut the grass\", id: 2, tags: [\"chore\", \"lawn\"] },\n  { title: \"Buy fetilizer\", id: 4, tags: [\"lawn\", \"shopping\"] },\n  { title: \"Build RefinerDB\", id: 3, tags: [\"fun\", \"code\"] },\n  { title: \"Document RefinerDB\", id: 11, tags: [\"chore\", \"code\"] },\n];\n"
      }
    },
    "template": "vanilla-ts",
    "customSetup": {
      "dependencies": {
        "refinerdb": "next"
      },
      "entry": "index.html"
    }
  },
  "quick-start": {
    "files": {
      "index.html": {
        "hidden": true,
        "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Parcel Sandbox</title>\n    <meta charset=\"UTF-8\" />\n  </head>\n\n  <body>\n    <div id=\"app\"></div>\n\n    <script src=\"src/index.ts\"></script>\n  </body>\n</html>\n"
      },
      "/src/index.ts": {
        "active": true,
        "code": "import { IndexType, RefinerDB } from \"refinerdb\";\n\nconst MOVIES_ENDPOINT =\n  \"https://raw.githubusercontent.com/DroopyTersen/refinerdb/dev/packages/refinerdb/public/movies.json\";\n\nlet init = async () => {\n  // 1. Create an instance of RefinerDB\n  let refinerDB = new RefinerDB(\"movies-db\");\n  // 2. Register the indexes\n  refinerDB.setIndexes([\n    // An index where the key doesn't match the property name on the item\n    { key: \"genre\", type: IndexType.String, path: \"genres\" },\n    // For properties that generally have unique values, improve\n    // performance by specifying 'skipRefinerOptions'\n    { key: \"title\", type: IndexType.String, skipRefinerOptions: true },\n    // A Date index\n    { key: \"released\", type: IndexType.Date, skipRefinerOptions: true },\n    // // A number index\n    { key: \"score\", type: IndexType.Number, skipRefinerOptions: true },\n  ]);\n\n  // 3. Fetch data then add it to the RefinerDB\n  let movies = await fetch(MOVIES_ENDPOINT).then((res) => res.json());\n  refinerDB.setItems(movies);\n\n  // 4. Query Data\n  // A 7+ rated 'Action' or 'Comedy' with 'day' in the title\n  let filter = {\n    title: \"day*\",\n    genre: [\"Action\", \"Comedy\"],\n    score: { min: 7 },\n  };\n  let { items, refiners, totalCount } = await refinerDB.query({\n    filter,\n    sort: \"released\",\n  });\n\n  // 5. Display the results\n  renderData({\n    totalCount,\n    titles: items.map((item) => item.title),\n    refiners,\n  });\n};\n\nconst renderData = (data) => {\n  const rootElement = document.getElementById(\"app\");\n  if (rootElement) {\n    rootElement.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;\n  }\n};\n\ninit();\n"
      }
    },
    "template": "vanilla-ts",
    "customSetup": {
      "dependencies": {
        "refinerdb": "next"
      },
      "entry": "index.html"
    }
  }
}